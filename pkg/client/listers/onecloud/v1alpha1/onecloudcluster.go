/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "yunion.io/x/onecloud-operator/pkg/apis/onecloud/v1alpha1"
)

// OnecloudClusterLister helps list OnecloudClusters.
// All objects returned here must be treated as read-only.
type OnecloudClusterLister interface {
	// List lists all OnecloudClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OnecloudCluster, err error)
	// OnecloudClusters returns an object that can list and get OnecloudClusters.
	OnecloudClusters(namespace string) OnecloudClusterNamespaceLister
	OnecloudClusterListerExpansion
}

// onecloudClusterLister implements the OnecloudClusterLister interface.
type onecloudClusterLister struct {
	indexer cache.Indexer
}

// NewOnecloudClusterLister returns a new OnecloudClusterLister.
func NewOnecloudClusterLister(indexer cache.Indexer) OnecloudClusterLister {
	return &onecloudClusterLister{indexer: indexer}
}

// List lists all OnecloudClusters in the indexer.
func (s *onecloudClusterLister) List(selector labels.Selector) (ret []*v1alpha1.OnecloudCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OnecloudCluster))
	})
	return ret, err
}

// OnecloudClusters returns an object that can list and get OnecloudClusters.
func (s *onecloudClusterLister) OnecloudClusters(namespace string) OnecloudClusterNamespaceLister {
	return onecloudClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OnecloudClusterNamespaceLister helps list and get OnecloudClusters.
// All objects returned here must be treated as read-only.
type OnecloudClusterNamespaceLister interface {
	// List lists all OnecloudClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OnecloudCluster, err error)
	// Get retrieves the OnecloudCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OnecloudCluster, error)
	OnecloudClusterNamespaceListerExpansion
}

// onecloudClusterNamespaceLister implements the OnecloudClusterNamespaceLister
// interface.
type onecloudClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OnecloudClusters in the indexer for a given namespace.
func (s onecloudClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OnecloudCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OnecloudCluster))
	})
	return ret, err
}

// Get retrieves the OnecloudCluster from the indexer for a given namespace and name.
func (s onecloudClusterNamespaceLister) Get(name string) (*v1alpha1.OnecloudCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("onecloudcluster"), name)
	}
	return obj.(*v1alpha1.OnecloudCluster), nil
}
